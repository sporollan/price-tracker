apiVersion: v1
kind: ConfigMap
metadata:
          name: mongo-init
data:
  mongo-init.js: |
    db.createUser(
            {
                user: "user1",
                pwd: "mysecretpassword",
                roles: [
                    {
                        role: "readWrite",
                        db: "products"
                    }
                ]
            }
    );
---
apiVersion: v1
kind: Service
metadata:
  name: product-service
spec:
  selector:
    app: product-service
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      containers:
      - name: product-service
        image: product-service:dev
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: scraper-service
spec:
  selector:
    app: scraper-service
  ports:
    - protocol: TCP
      port: 8001
      targetPort: 8001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scraper-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scraper-service
  template:
    metadata:
      labels:
        app: scraper-service
    spec:
      containers:
      - name: scraper-service
        image: scraper-service:dev
        imagePullPolicy: Never
        ports:
        - containerPort: 8001
---
apiVersion: v1
kind: Service
metadata:
  name: product-db
spec:
  selector:
    app: product-db
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-db
  template:
    metadata:
      labels:
        app: product-db
    spec:
      containers:
      - name: product-db
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: root
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: example
        - name: MONGO_INITDB_DATABASE
          value: products
        volumeMounts:
        - name: mongo-init
          mountPath: /docker-entrypoint-initdb.d/mongo-init.js
          subPath: mongo-init.js
        - name: mongodbdata
          mountPath: /data/db
      volumes:
      - name: mongo-init
        configMap:
          name: mongo-init
      - name: mongodbdata
        persistentVolumeClaim:
          claimName: mongodbdata
---
apiVersion: v1
kind: Service
metadata:
  name: scraper-db
spec:
  selector:
    app: scraper-db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scraper-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scraper-db
  template:
    metadata:
      labels:
        app: scraper-db
    spec:
      containers:
      - name: scraper-db
        image: postgres
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          value: mysecretpassword
        volumeMounts:
        - name: postgresqldata
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgresqldata
        persistentVolumeClaim:
          claimName: postgresqldata
---
apiVersion: v1
kind: Service
metadata:
  name: ui
spec:
  selector:
    app: ui
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ui
  template:
    metadata:
      labels:
        app: ui
    spec:
      containers:
      - name: ui
        image: ui:dev
        imagePullPolicy: Never
        ports:
        - containerPort: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ui-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: ui.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ui
            port:
              number: 3000
      - path: /tracked
        pathType: Prefix
        backend:
          service:
            name: scraper-service
            port:
              number: 8001

      - path: /toggle
        pathType: Prefix
        backend:
          service:
            name: scraper-service
            port:
              number: 8001

      - path: /run_scraper
        pathType: Prefix
        backend:
          service:
            name: scraper-service
            port:
              number: 8001
      - path: /product
        pathType: Prefix
        backend:
          service:
            name: product-service
            port:
              number: 8080
      - path: /productMetadata
        pathType: Prefix
        backend:
          service:
            name: product-service
            port:
              number: 8080
      - path: /productDetails
        pathType: Prefix
        backend:
          service:
            name: product-service
            port:
              number: 8080
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodbdata
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresqldata
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi